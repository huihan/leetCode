/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void flatten(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(root == null ) return;
        flatten_DP(root);
    }
    public TreeNode flatten_DP(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(root.left == null && root.right == null)
        {
            return root;
        }
        if(root.left != null && root.right == null)
        {
            root.right = root.left;
            root.left = null;
            return flatten_DP(root.right);
        }
        if(root.left == null && root.right != null)
        {
            return flatten_DP(root.right);
        }
        TreeNode temp = root.right;
        root.right = root.left;
        root.left = null;
        TreeNode mid = flatten_DP(root.right);
        mid.right = temp;
        return flatten_DP(mid.right);
    }
}
