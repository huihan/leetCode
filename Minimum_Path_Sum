public class Solution {
    public int minPathSum(int[][] grid) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(grid == null) return 0;
        if(grid.length<1) return 0;
        if(grid[0].length <1) return 0;
        return minPathSum_DP(grid , 0 , 0);
    }
    private int minPathSum_DP(int[][] grid ,int row , int col)
    {
        if(row == grid.length-1 && col == grid[0].length-1) return grid[row][col];
        if(row == grid.length-1 ) return grid[row][col] + minPathSum_DP(grid , row , col+1);
        if(col == grid[0].length-1)  return grid[row][col] + minPathSum_DP(grid , row+1 , col);
        return Math.min( 
            grid[row][col] + minPathSum_DP(grid , row , col+1),
            grid[row][col] + minPathSum_DP(grid , row+1 , col)
        );
    }
}
