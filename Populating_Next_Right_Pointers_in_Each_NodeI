import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
public class Solution {
    public void connect(TreeLinkNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(root == null) return ;
        root.next = null; 
        Queue<TreeLinkNode> queue = new LinkedList<TreeLinkNode>();
        queue.offer(root);
        int count = 1;
        while(count > 0)
        {
            while(count > 0)
            {
                TreeLinkNode tem = queue.poll();
                if(tem.left!=null) queue.offer(tem.left);
                if(tem.right!=null) queue.offer(tem.right);
                connect_DP(tem);
                count--;
            }
            count= queue.size();
        }
        
    }
    private void connect_DP(TreeLinkNode root){
        if( root== null) return;
        if(root.left!=null && root.right!=null) 
        {
            root.left.next = root.right;
            root.right.next = findNext(root.next);
        }
        else if(null == root.right && root.left!=null) 
            root.left.next = findNext(root.next);
        else if(null == root.left && root.right!=null)
            root.right.next = findNext(root.next); 
    }
    private TreeLinkNode findNext(TreeLinkNode root)
    {
        if(null == root) return null;
        if(null != root.left) return root.left;
        if(null != root.right) return root.right;
        return findNext(root.next);
    }
}
