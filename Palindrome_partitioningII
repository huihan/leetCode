import java.lang.String;
import java.util.Arrays;
import java.util.ArrayList;
public  class Solution { 
    ArrayList<ArrayList<String>> all = new ArrayList<ArrayList<String>>();
    private int now_min =  Integer.MAX_VALUE;
    public int minCut(String s) { 
        all.clear();
        ArrayList<String> al = new ArrayList<String>();
        dfs(s,0,al);
        return now_min; 
    }

    void dfs(String s, int start , ArrayList<String > al)
    {
        if(start == s.length())
        {
            all.add(new ArrayList<String>(al)); 
            //System.out.println("all.add("+ al.get(0));
            if( now_min > al.size()-1)
                now_min = al.size()-1;
            return;
        }
        for(int i = s.length() -1 ; i >= start ; i--)
        { 
            if(IsPalindrome(s,start , i ))
            {
                al.add(s.substring(start, i+1 )); 
                dfs(s,i+1,al);
                al.remove(al.size()-1);
            }
        }
    } 
    private  boolean IsPalindrome( String s, int start , int end)
    { 
        while (start < end)
        {
            if(s.charAt(start) != s.charAt(end))
            {
                return false;
            }
        ++start;
        --end;
        }
        return true;
    }
}
