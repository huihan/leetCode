public class Solution {
    public int longestValidParentheses(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int res = 0, last = -1;
        Stack<Integer> lefts = new Stack<Integer>();
        for(int i = 0 ; i < s.length() ; i++)
        {
            if(s.charAt(i) == '(')
            {
                lefts.push(i);
            }
            else
            {
                if(lefts.isEmpty())
                    last = i;
                else
                {
                    lefts.pop();
                    if(lefts.isEmpty())
                       res = Math.max(res,i - last);
                    else
                        res = Math.max(res,i-lefts.peek());
                }
            }
        }
        return res;
    }
}



public class Solution {
    public int longestValidParentheses(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        Stack<Integer> st = new Stack<Integer>();
        int len = s.length();
        int res = 0;
        int carry = 0; 
        for(int i = 1 ; i <= len ; i++)
        {
            char ch = s.charAt(i-1);
            switch(ch){
                case '(':
                    st.push(i - carry);
                    carry = 0;
                     break;
                case ')':
                    if(st.isEmpty())
                    {
                        st.push(-i); 
                        carry = 0;
                    } 
                    else
                    {
                        if(st.peek() > 0)
                        {
                            carry = i - st.pop() +1;
                            res = Math.max(res,carry );
                        }
                        else 
                        {
                            carry = 0;
                            st.push(-i);
                        }
                    }
                    break;
            }
        }
        return res;
    }
}
